{
  // Appearance
  "workbench.colorTheme": "Default Dark Modern",
  "editor.fontFamily": "\"Cousine Nerd Font Mono\"",
  "editor.fontSize": 16,
  "editor.lineNumbers": "relative",
  "editor.minimap.enabled": false,
  "editor.wordWrap": "off",
  "editor.snippetSuggestions": "none",
  "workbench.iconTheme": "vscode-icons",
  "workbench.sideBar.location": "right",
  "window.menuBarVisibility": "hidden",
  "workbench.startupEditor": "none",
  "search.useIgnoreFiles": false,

  // =============== Language specifics ===============

  // Python
  "python.languageServer": "Pylance",
  "ruff.enable": true,
  "ruff.lint.enable": true,
  "ruff.organizeImports": true,
  "[python]": {
    "editor.tabSize": 4,
    "editor.defaultFormatter": "charliermarsh.ruff",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
        "source.organizeImports.ruff": "explicit"
    }
  },
  "python.analysis.typeCheckingMode": "basic", // options: "basic", "strict"

  // Rust
  "[rust]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "rust-lang.rust-analyzer",
    "editor.tabSize": 4,
    "editor.insertSpaces": true
  },
  "rust-analyzer.checkOnSave.command": "clippy",
  "rust-analyzer.cargo.allFeatures": true,
  "editor.inlayHints.enabled": "off",

  // // C/C++
  // "[c]": {
  //   "editor.tabSize": 4,
  //   "editor.insertSpaces": true,
  //   "editor.defaultFormatter": "xaver.clang-format",
  //   "editor.formatOnSave": false
  // },
  // "[cpp]": {
  //   "editor.tabSize": 4,
  //   "editor.insertSpaces": true,
  //   "editor.defaultFormatter": "xaver.clang-format",
  //   "editor.formatOnSave": false
  // },
  // "C_Cpp.clang_format_fallbackStyle": "Linux",
  // "C_Cpp.default.cStandard": "c17",
  // "C_Cpp.default.cppStandard": "c++17",
  // "C_Cpp.intelliSenseEngine": "default",

  // Web Dev
  "[javascript]": {
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": false
  },
  "[javascriptreact]": {
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": false
  },
  "[typescript]": {
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": false
  },
  "[typescriptreact]": {
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": false
  },
  "[css]": {
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": false
  },
  "[html]": {
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": false
  },
  "prettier.documentSelectors": ["**/*.astro"],
  "[astro]": {
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": false
  },

  // =============== Markup Languages ===============   
  "[yaml]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": "advanced",
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.quickSuggestions": {
      "comments": "on",
      "other": "on",
      "strings": "on"
    },
    "editor.quickSuggestionsDelay": 250,
    "editor.wordBasedSuggestions": "off"
  },
  "[markdown]": {
    "editor.tabSize": 2,
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false,
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.wordWrap": "on",
    "editor.quickSuggestions": {
      "comments": "off",
      "strings": "off",
      "other": "off"
    }
  },

  // ===============  VIM  ===============
  // once you get vimmed, there is no going back.
  // an addiction that you cannot kick.
  // a drug that you can take all the time, and nobody cares.
  "vim.leader": "<Space>",
  "vim.hlsearch": false,
  "vim.useSystemClipboard": true,
  "vim.normalModeKeyBindingsNonRecursive": [
    // Pane navigation
    {
      "before": ["leader", "h"],
      "commands": ["workbench.action.focusLeftGroup"]
    },
    {
      "before": ["leader", "j"],
      "commands": ["workbench.action.focusBelowGroup"]
    },
    {
      "before": ["leader", "k"],
      "commands": ["workbench.action.focusAboveGroup"]
    },
    {
      "before": ["leader", "l"],
      "commands": ["workbench.action.focusRightGroup"]
    },
    // quick fix, jump to next, prev, and show list of problems
    {
      "before": ["leader", "q", "l"],
      "commands": ["workbench.actions.view.problems"]
    },
    {
      "before": ["leader", "q", "n"],
      "commands": ["editor.action.marker.next"]
    },
    {
      "before": ["leader", "q", "p"],
      "commands": ["editor.action.marker.prev"]
    },
    {
      "before": ["leader", "q", "a"],
      "commands": ["editor.action.quickFix"]
    },
    // mimicing telescope searching for files and searching in files
    {
      "before": ["leader", "s", "f"],
      "commands": ["workbench.action.quickOpen"]
    },
    {
      "before": ["leader", "s", "g"],
      "commands": ["workbench.action.findInFiles"]
    },
    // goto's
    {
      "before": ["g", "d"],
      "commands": ["editor.action.revealDefinition"]
    },
    {
      "before": ["g", "r"],
      "commands": ["editor.action.referenceSearch.trigger"]
    },
    // formatting
    {
      "before": ["leader", "f"],
      "commands": ["editor.action.formatDocument"]
    },
    // rename variable
    {
      "before": ["leader", "r", "n"],
      "commands": ["editor.action.rename"]
    }
  ],

  // Web Dev
  "go.toolsManagement.autoUpdate": true,
  "typescript.updateImportsOnFileMove.enabled": "always",
  "liveServer.settings.donotVerifyTags": true,
  "liveServer.settings.donotShowInfoMsg": true,

  // Git
  "git.openRepositoryInParentFolders": "never",

  // Jupyter Notebook
  "notebook.lineNumbers": "on",

  // Terminal
  "terminal.integrated.inheritEnv": false,
  "terminal.integrated.defaultProfile.windows": "Windows PowerShell",
  "terminal.integrated.defaultProfile.linux": "bash",

  // Copilot
  "github.copilot.editor.enableAutoCompletions": false,
  "editor.lightbulb.enabled": "onCode",

  // Selection completion
  "editor.acceptSuggestionOnCommitCharacter": false,

  // Misc
  "vsicons.dontShowNewVersionMessage": true
}
